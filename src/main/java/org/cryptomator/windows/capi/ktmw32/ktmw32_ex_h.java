// Generated by jextract

package org.cryptomator.windows.capi.ktmw32;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class ktmw32_ex_h {

    ktmw32_ex_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup(System.mapLibraryName("KtmW32"), LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfInt C_LONG = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfDouble C_LONG_DOUBLE = ValueLayout.JAVA_DOUBLE;

    private static class CreateTransaction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ktmw32_ex_h.C_POINTER,
            ktmw32_ex_h.C_POINTER,
            ktmw32_ex_h.C_POINTER,
            ktmw32_ex_h.C_LONG,
            ktmw32_ex_h.C_LONG,
            ktmw32_ex_h.C_LONG,
            ktmw32_ex_h.C_LONG,
            ktmw32_ex_h.C_POINTER
        );

        public static final MemorySegment ADDR = ktmw32_ex_h.findOrThrow("CreateTransaction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE CreateTransaction(LPSECURITY_ATTRIBUTES lpTransactionAttributes, LPGUID UOW, DWORD CreateOptions, DWORD IsolationLevel, DWORD IsolationFlags, DWORD Timeout, LPWSTR Description)
     * }
     */
    public static FunctionDescriptor CreateTransaction$descriptor() {
        return CreateTransaction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE CreateTransaction(LPSECURITY_ATTRIBUTES lpTransactionAttributes, LPGUID UOW, DWORD CreateOptions, DWORD IsolationLevel, DWORD IsolationFlags, DWORD Timeout, LPWSTR Description)
     * }
     */
    public static MethodHandle CreateTransaction$handle() {
        return CreateTransaction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE CreateTransaction(LPSECURITY_ATTRIBUTES lpTransactionAttributes, LPGUID UOW, DWORD CreateOptions, DWORD IsolationLevel, DWORD IsolationFlags, DWORD Timeout, LPWSTR Description)
     * }
     */
    public static MemorySegment CreateTransaction$address() {
        return CreateTransaction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE CreateTransaction(LPSECURITY_ATTRIBUTES lpTransactionAttributes, LPGUID UOW, DWORD CreateOptions, DWORD IsolationLevel, DWORD IsolationFlags, DWORD Timeout, LPWSTR Description)
     * }
     */
    public static MemorySegment CreateTransaction(MemorySegment lpTransactionAttributes, MemorySegment UOW, int CreateOptions, int IsolationLevel, int IsolationFlags, int Timeout, MemorySegment Description) {
        var mh$ = CreateTransaction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateTransaction", lpTransactionAttributes, UOW, CreateOptions, IsolationLevel, IsolationFlags, Timeout, Description);
            }
            return (MemorySegment)mh$.invokeExact(lpTransactionAttributes, UOW, CreateOptions, IsolationLevel, IsolationFlags, Timeout, Description);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CommitTransaction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ktmw32_ex_h.C_INT,
            ktmw32_ex_h.C_POINTER
        );

        public static final MemorySegment ADDR = ktmw32_ex_h.findOrThrow("CommitTransaction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CommitTransaction(HANDLE TransactionHandle)
     * }
     */
    public static FunctionDescriptor CommitTransaction$descriptor() {
        return CommitTransaction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CommitTransaction(HANDLE TransactionHandle)
     * }
     */
    public static MethodHandle CommitTransaction$handle() {
        return CommitTransaction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CommitTransaction(HANDLE TransactionHandle)
     * }
     */
    public static MemorySegment CommitTransaction$address() {
        return CommitTransaction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CommitTransaction(HANDLE TransactionHandle)
     * }
     */
    public static int CommitTransaction(MemorySegment TransactionHandle) {
        var mh$ = CommitTransaction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CommitTransaction", TransactionHandle);
            }
            return (int)mh$.invokeExact(TransactionHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RollbackTransaction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ktmw32_ex_h.C_INT,
            ktmw32_ex_h.C_POINTER
        );

        public static final MemorySegment ADDR = ktmw32_ex_h.findOrThrow("RollbackTransaction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL RollbackTransaction(HANDLE TransactionHandle)
     * }
     */
    public static FunctionDescriptor RollbackTransaction$descriptor() {
        return RollbackTransaction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL RollbackTransaction(HANDLE TransactionHandle)
     * }
     */
    public static MethodHandle RollbackTransaction$handle() {
        return RollbackTransaction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL RollbackTransaction(HANDLE TransactionHandle)
     * }
     */
    public static MemorySegment RollbackTransaction$address() {
        return RollbackTransaction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL RollbackTransaction(HANDLE TransactionHandle)
     * }
     */
    public static int RollbackTransaction(MemorySegment TransactionHandle) {
        var mh$ = RollbackTransaction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RollbackTransaction", TransactionHandle);
            }
            return (int)mh$.invokeExact(TransactionHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

